**********流程**********
mysql查询操作流程  客户端 -》 连接器 -》 分析器 -》 优化器 -》 执行器 -》 存储引擎（InnoDB、MyISAM、Memory）
mysql更新操作流程  innodb有redolog的日志记录， binlog是mysql的server层共有的和存储层没有关系 
                  redolog相当于暂时存储更新数据（有存储更新sql和存储数据变化前后两条数据）日志  binlog是存储了所有的更新操作的日志，写在磁盘上 
两阶段的提交 （保持两个日志的数据一致性） 
1.执行器先找引擎取ID=2这一行。ID是主键，引擎直接用树搜索找到这一行。如果ID=2这一行所在的数据页本来就在内存中，就直接返回给执行器；否则，需要先从磁盘读入内存，然后再返回。
2.执行器拿到引擎给的行数据，把这个值加上1，比如原来是N，现在就是N+1，得到新的一行数据，再调用引擎接口写入这行新数据。
3.引擎将这行新数据更新到内存中，同时将这个更新操作记录到redo log里面，此时redo log处于prepare状态。然后告知执行器执行完成了，随时可以提交事务。
4.执行器生成这个操作的binlog，并把binlog写入磁盘。
5.执行器调用引擎的提交事务接口，引擎把刚刚写入的redo log改成提交（commit）状态，更新完成。

**********事务**********
不同事务隔离级别的区别：
读未提交：一个事务还未提交，它所做的变更就可以被别的事务看到
读提交：一个事务提交之后，它所做的变更才可以被别的事务看到
可重复读：一个事务执行过程中看到的数据是一致的。未提交的更改对其他事务是不可见的
串行化：对应一个记录会加读写锁，出现冲突的时候，后访问的事务必须等前一个事务执行完成才能继续执行
1、事务隔离的实现：每条记录在更新的时候都会同时记录一条回滚操作。同一条记录在系统中可以存在多个版本，这就是数据库的多版本并发控制（MVCC）。
2、回滚日志什么时候删除？系统会判断当没有事务需要用到这些回滚日志的时候，回滚日志会被删除。
3、什么时候不需要了？当系统里么有比这个回滚日志更早的read-view的时候。
4、为什么尽量不要使用长事务。长事务意味着系统里面会存在很老的事务视图，在这个事务提交之前，回滚记录都要保留，这会导致大量占用存储空间。除此之外，长事务还占用锁资源，可能会拖垮库。
5、事务启动方式：一、显式启动事务语句，begin或者start transaction,提交commit，回滚rollback；二、set autocommit=0，该命令会把这个线程的自动提交关掉。这样只要执行一个select语句，事务就启动，并不会自动提交，直到主动执行commit或rollback或断开连接。
6、建议使用方法一，如果考虑多一次交互问题，可以使用commit work and chain语法。在autocommit=1的情况下用begin显式启动事务，如果执行commit则提交事务。如果执行commit work and chain则提交事务并自动启动下一个事务。

**********索引**********
索引：mysql的innodb使用的都是B+树结构索引
主键查询方式，则只需要搜索ID这棵B+树
普通索引查询方式，则需要先搜索k索引树，得到ID的值为500，再到ID索引树搜索一次。这个过程称为回表。

覆盖索引 查询的值保存在索引上了，不需要再回表查询主键再查询数据信息
前缀索引 通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的 
索引下推 mysql5.6版本之后索引会根据查询的条件每一个都比较之后再回表（mysql的自身优化）

对于由于索引统计信息不准确导致的问题，你可以用analyze table来解决（可以让统计信息刷新）。
而对于其他优化器误判的情况，你可以在应用端用force index来强行指定索引，也可以通过修改语句来引导优化器，还可以通过增加或者删除索引来绕过这个问题。

字符串字段创建索引：
1.直接创建完整索引，这样可能比较占用空间；
2.创建前缀索引，节省空间，但会增加查询扫描次数，并且不能使用覆盖索引；
3.倒序存储，再创建前缀索引，用于绕过字符串本身前缀的区分度不够的问题；
4.创建hash字段索引，查询性能稳定，有额外的存储和计算消耗，跟第三种方式一样，都不支持范围扫描。

**********锁**********
MySQL里面的锁大致可以分成全局锁、表级锁和行锁三类
1.全局锁的典型使用场景是，做全库逻辑备份 Flush tables with read lock (FTWRL)
2.MySQL里面表级锁有两种，一种是表锁，一种是元数据锁(meta data lock,MDL) 
MDL的作用：保证读写的正确性。
在对一个表做增删改查操作的时候，加MDL读锁；当要对表做结构变更操作的时候，加MDL写锁。
读锁之间不互斥。读写锁之间，写锁之间是互斥的，用来保证变更表结构操作的安全性。
MDL 会直到事务提交才会释放，在做表结构变更的时候，一定要小心不要导致锁住线上查询和更新。     
  ！！！！记录一次线上sql失败， 新版本上线更新多个sql一块执行提交（包含的表都是表结构的变更），现网数据正在跑设备巡检，sql更新操作有的成功有的失败。可能因为长事务导致表结构更新的失败
3.在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放
减少死锁的主要方向，就是控制访问相同资源的并发事务量。 方法：中间件队列排队 一个值拆成多个值 

对于可重复读，查询只承认在事务启动前就已经提交完成的数据；
对于读提交，查询只承认在语句启动前就已经提交完成的数据；
而当前读，总是读取已经提交完成的最新版本。

redo log 主要节省的是随机写磁盘的IO消耗（转成顺序写），而change buffer主要节省的则是随机读磁盘的IO消耗。

数据库事务  ACID（Atomicity、Consistency、Isolation、Durability，即原子性、一致性、隔离性、持久性）   
分布式系统  Consistency（一致性）、 Availability（可用性）、Partition tolerance（分区容错性），三者不可得兼。


